#!/usr/bin/python
import json
import urllib
import argparse
import subprocess

def get_args():
        parser = argparse.ArgumentParser(description="A tool to download files from the 0x00sec repo.")
        parser.add_argument("action",metavar="<action>",nargs="*")
        return parser.parse_args()

def download_package(package):
        try:
                with open("packages.list","r") as r:
                        packages = [pack.strip() for pack in r.readlines()]
                        if package not in packages: return "Package not found, perhaps try null-get update?"
        except:
                exit("packages.list not found, use null-get update to fix.")
        print "Cloning package "+package
        url = parse_package_json(package)["repo-url"].replace("https://","git://")

        clone_proc = subprocess.Popen(["git","clone",url+".git","./packages/"+package], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = clone_proc.communicate()

        if clone_proc.returncode != 0:
                if "already exists" in err:
                        return package+" is already downloaded. Use 'null-get upgrade' to update."
                elif "not found" in err:
                        return package+" does not exist. Use 'null-get update' to fix, and contact repo admins if the problem persists."

        return package+" downloaded successfully."

def update_packages():
        print "Retrieving package list..."
        repo = urllib.urlopen("https://github.com/0x00sec/Agora/tree/master/Packages/").readlines()
        packages = []
        with open("packages.list","w") as f:
                for line in repo:
                        if ".json" in line and "blob" in line:
                                line = line.split()[3].replace("href=","").replace('"','').split("/")[-1].replace(".json","")+"\n"
                                f.write(line)

def parse_package_json(package):
        package_info = json.loads(urllib.urlopen("https://raw.githubusercontent.com/0x00sec/Agora/master/Packages/"+package+".json").read())
        return package_info[package][0]

def decide_on_action():
        action = get_args().action
        if not action: exit("No action supplied")
        if action[0] == "install":
                for package in action[1:]:
                        print download_package(package)
        elif action[0] == "update":
                update_packages()

decide_on_action()
